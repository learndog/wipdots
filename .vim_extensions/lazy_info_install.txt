# LAZYVIM INSTALL INSTRUCTIONS
# Last updated 2025-04-09

############################################################
############ INSTALL NEOVIM    #############################
############################################################


############ NVIM INSTALL - DEBIAN 
# IMPORTANT NOTE FOR GCP VERTEX AI VMS ON BUSTER...
# Minimum glibc version to run these releases is 2.31. People requiring releases
# that work on older glibc versions can find them at
# https://github.com/neovim/neovim-releases and https://github.com/neovim/neovim-releases/releases

# See https://github.com/nvim-lua/kickstart.nvim?tab=readme-ov-file#Install-Recipes
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip curl fzf lazygit fd-find # Binary is fdfind
cd ~/temp_install
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
#OR curl -LO https://github.com/neovim/neovim-releases/releases/download/v0.11.0/nvim-linux-x86_64.tar.gz # Built with glibc 2.17 
sudo rm -rf /opt/nvim-linux-x86_64
sudo mkdir -p /opt/nvim-linux-x86_64
sudo chmod a+rX /opt/nvim-linux-x86_64
sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz
sudo ln -sf /opt/nvim-linux-x86_64/bin/nvim /usr/local/bin/

############ NVIM INSTALL - UBUNTU
# See https://github.com/nvim-lua/kickstart.nvim?tab=readme-ov-file#Install-Recipes
sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
sudo ln -sf /opt/nvim-linux-x86_64/bin/nvim /usr/local/bin/

############################################################
############ UNINSTALL LAZYVIM - DEBIAN  ###################
############################################################

	# Optionally backup first
	mv ~/.config/lazy{,.bak}
	mv ~/.local/share/lazy{,.bak}
	mv ~/.local/state/lazy{,.bak}
	mv ~/.cache/lazy{,.bak}

# Delete everything in the nvim install and cache
rm -rf ~/.config/lazy
rm -rf ~/.local/share/lazy
rm -rf ~/.local/state/lazy
rm -rf ~/.cache/lazy

############################################################
############ INSTALL STARTER LAZYVIM   #####################
############################################################
# See https://www.lazyvim.org/
git clone https://github.com/LazyVim/starter ~/.config/lazy
# rm -rf ~/.config/nvim/.git   # but keep it if you want to update with git pull

# In .profile... Set nvim to use lazy config
export XDG_CONFIG_HOME="$HOME/.config"
export NVIM_APPNAME="lazy"

# Check it from nvim cmd line
echo $XDG_CONFIG_HOME
echo stdpath('config')
# Check it from init.lua file
print("Loading init.lua from " .. vim.fn.stdpath('config'))

############################################################
############ INSTALL NERDFONTS #############################
############################################################

------------------------------------------------------------------------------------------
* Nerd Font Install - Windows
------------------------------------------------------------------------------------------
* Download CaskaydiaCove Nerd Font
  from https://www.nerdfonts.com/font-downloads
  into C:\Users\me\Fonts\CaskaydiaCoveNerdFonts\
* Select all tts files (not readme or license) and right mouse click to install

------------------------------------------------------------------------------------------
* Nerd Font Install - JupyterLab
------------------------------------------------------------------------------------------
* Install the font in debian
wget -P ~/.local/share/fonts https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/CascadiaCode.zip
cd ~/.local/share/fonts
unzip CascadiaCode.zip
rm CascadiaCode.zip
fc-cache -fv
* JupyterLab and go to Settings > Advanced Settings Editor...
  In the Terminal section, add or modify the following JSON configuration:
```
{
  "fontFamily": "'Cascadia Code Nerd Font', 'Cascadia Code', monospace",
  "fontSize": 13
}
```
* Save the changes and restart your JupyterLab session.
Note: To determine the font names, try using fc-list | grep Cove

############################################################
############ BASIC CONFIG ##################################
############################################################
# With :LazyExtra
# * Add lang.python (provides LSP:ruff, pyright, LINT:ruff, FORMAT:ruff, DAP:nvim_dap_python)
# * Add coding.mini-comment  (provides gcc for toggle comment of curr or selected line)

############################################################
###########  CREATE AN NVIM PYTHON ENV  ####################
############################################################
# First install desired python 3.10+ if not already available
# See  below for activating it in init.lua for neovim
deactivate
python3 -m venv ~/.venvs/nvim
pip install neovim

############################################################
#### ADD WIPDOTS CUSTOMIZATION TO LAZYVIM init.lua
############################################################

Introductory Notes: 
* Assumes location of .venvs and nvim env
* Will clone wipdots and use symlinks (easier to manage and easier to update wipdots)
* Alternatively, can start with folke example config at /home/jupyter/.config/lazy/lua/plugins/example.lua

==========================================================================================  
* Add custom wipdots configuration 
==========================================================================================  
* cd ~ and then git clone wipdots  (be sure to match to ssh config if contributing)
* Remove the existing ~/.config/lazy/init.lua 
* Symlink to wipdots to the lazy init.lua
  ln -s ~/wipdots/nvim/.config/lazy/init.lua ~/.config/lazy/init.lua


############################################################
##### TODO    ##############################################
############################################################
* jj, jh, jl for insert mode esc to normal, jump to first letter after left grouper, jump outside next char closer (lookup to match)
* Remap <leader><leader> to <leader><leader><leader><leader> for cwd files to something else easy so I can use <leader><leader> for all my maps
* Map <leader><leader><leader> to "<leader>," for buffers - because <leader><leader> is no longer available
* Add 0$ cycle
* Folds
* Indent and move up/down
* Show this install file by a command
* Show usage tips and keymap info by a command
* Show and search keymaps
* Save, restore and delete sessions
* Windows - eg faster or repeatable window sizing & maximizer
* <leader><leader> Convenience and personal stability mappings
  Same consistent personal interface under <leader><leader> 
  but leave other stuff the same
  Will need to...
    * Map <leader><leader><leader> to "<leader>," for buffers - because <leader><leader> is no longer available
    * Remap <leader><leader> to <leader><leader>somethingElse for easy access to cwd files fzf (that was the lazyvim default mapping)
    * Map <leader><leader> to all my maps. Set a variable if possible instead of <leader><leader> in case I want to trigger differently
    * Map <leader><leader> for symbols/references
    * Call require("helpers").load_helpers() in your LazyVim file with 
	local M = {}
	function M.load_helpers()
	    vim.cmd("source $HOME/wipdots/.vim_helpers/folding.vim")
	    vim.cmd("source $HOME/wipdots/.vim_helpers/mappings.vim")
	end
	return M
    * Lazy load my helpers like this...
	vim.keymap.set("n", "<leader>fold", function()
	    vim.cmd("source $HOME/wipdots/.vim_helpers/folding.vim")
	end, { desc = "Load Folding Configurations" })
      or simple load them like this...
	vim.cmd([[
	source $HOME/wipdots/.vim_helpers/folding.vim
	source $HOME/wipdots/.vim_helpers/other_helpers.vim
	]])
      which will dynamically source files only when a command or keymap is triggered
    * Consider migrating critical performance items to lua, eg
	vim.opt.foldmethod = "indent"
	vim.opt.foldlevel = 2


 

############# DEFAULT KEYMAPS
https://www.lazyvim.org/keymaps



############## SETUP NVIM
# WARNING! This needs work - not usable as-is.

# Set nvim as default editor (or use vim and alias to nvim)
git config --global core.editor "nvim"
alias nvimdiff='nvim -d'
# Set nvimdiff, ie nvim -d, as the diff and merge tool
git config --global difftool.nvimdiff.cmd "nvim -d \"$LOCAL\" \"$REMOTE\""
git config --global mergetool.nvimdiff.cmd "nvim -d \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\""
git config --global diff.tool nvimdiff # Set as default tool
git config --global difftool.prompt false  # Git will launch without prompting
git config --global merge.tool nvimdiff # Set as default tool
git difftool <commit1> <commit2> # Test it
git mergetool # Test it

# Open files for comparison
git difftool # Compare LOCAL and REMOTE
nvim -d file1 file2
nvimdiff file1 file2 # with alias

# View comparisons (e.g., commits, branches, files)
git diff <file1> <file2>  # Compare two files
git diff <commit-hash> <file> # Compare working dir to a specific commit
git diff <commit1> <commit2> <file> # Compare commits for a file (or can compare branches)
git diff <commit-hash> <file> # Compare to a commit for a file


