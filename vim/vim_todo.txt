Vim Todo

BACKLOG
* Debug - pudb and ipdb command line tool - see usage info
* Status line - Add filetype to status line
* Status line - Add git branch name to status line (see lightline info about using vim-gitbranch, or maybe fugitive)
* Keymap - Block alignment of 2nd column, eg docstrings like 'parameter:      mytext'
* LSP - format on save
* LSP - format a folder
* Browser - TUI browsers with and without javascript
* Search - Add vim version of grep -rni -- "searchText" to find text across files
* Keymap - clean up both which-key mappings
* Keymap - Check coc popups scrolling with Ctrl-f and Ctrl-b
* Keymap - Use del key to delete without yank
* Keymap -  Safety keymaps
    * map C-s to :w<CR> and C-S to :wa<CR>
    * map Ctrl-x to close terminal?
    * map Ctrl-z to folds?
* Keymap - For git diff
* Add vim shortcuts for gitdiff cmds...
    * :diffg RE  # get from REMOTE
    * :diffg BA  # get from BASE
    * :diffg LO  # get from LOCAL
* Help - View usage file read only (Leader-vhu)
* File Manager - TUI in terminal... https://terminaltrove.com/superfile/, ranger, mc
* Buffers - 
    * Buffer rename
    * Open a buffer in new split
* Tabs - 
    * Tab rename
    * Open buffers as new tabs (if not already a tab)
    * Close all tabs (wihtout error on last one) but keep buffers
* tmux - Fix Ctrl-arrows and status line colors for vim running in tmux
* Keymap - Leader vm?... for :verbose map


BUGS
* autopair brackets - in config file, if {<CR> slowly, it fills in with funny stuff - stop it!
  also for python reconsider the alignment (for {<CR>, tab too large and closing brackets should be on sep line pos 1)
* In GCP vim, delete key sometimes doesn't work in insert mode
* jl to escape insert mode will move cursor left afterwards
* exit terminal requires manual :bd (because of .profile) unless add .profile to .bashrc
* Sometimes can't bksp in insert mode
* Land inside autoclose of surround chars - move cursor inside quotes after autoclose (or just use jh/jl?)

BIG TICKET ITEMS
* fzf searches - https://bluz71.github.io/2018/12/04/fuzzy-finding-in-vim-with-fzf.html
* Add delta to improve diff viewing
  See https://github.com/dandavison/delta
  See https://dev.to/cloudx/delta-a-new-git-diff-tool-to-rock-your-productivity-2773
  Also take a look at colordiff and difftastic
* Keymaps for :terminal, :vertical terminal, :vertical <modifier> terminal,
      where <modifier> is... lefta[bove], abo[veleft], bel[owright], rightb[elow]
      See https://www.baeldung.com/linux/vim-terminal-open-position
* Lazygit...
From lazyvim video on mac,
in ~/Library/Application_Support/lazygit/config.yml...
        ```
        keybinding:
          universal:
            return: '<c-\>'

        gui:
          theme:
              selectedLineBgColor:
                - underline
              selectedRangeBgColor:
                - underline

        git:
          paging:
            colorArg: never
            pager: delta --dark --paging=never
        ```	

FZF SEARCH
* TODO: rg fzf search in curr dir and in curr git repos 
* Help files
* Keymap and verbose(where keybind def) keymap searches using vim-which-key.
        See https://jay-baker.com/posts/vim-1-which-key/
* :[b|p|d]Lines and :[b|p|d]Files  (b=curr buffer, bb=open buff files, p=project, d=specify dir)
* :Files search with dotfiles included
* Find all vim swap files in dir or git project
* Try something like :GLines (maybe using my command line search for text in git commits/diffs)

GIT
* Synch scroll for git blame sidebar

TERMINALS (<Leader>t)
* Keymaps for :tab terminal

SNIPPETS
* Simple manual snippets (and keep in git - manual updates get pushed, no on-the-fly additions)

OLD VIM VERSIONS
* fix sign column toggle for vim 7.4-
      see https://stackoverflow.com/questions/18319284/vim-sign-column-toggle
* Add support for old (cavim) versions, eg https://github.com/ctrlpvim/ctrlp.vim

NATIVE NVIM
* Nvim compatibility
* Commenting should start at first nonws char, not col pos 1 (works in vim)
* Ensure coc organize imports works - See https://github.com/neoclide/coc.nvim/issues/4372
* Try debug capabilities

WINDOWS
* Better splits and windows - see https://github.com/Aster89/WinZoZ/tree/main
* Add a <leader> version of <C-W> commands
* Can we synchronize split window content? What does that mean, and when useful? Eg merge conflicts or diff windows?

TESTS
* Code and unit test - fast process

DEBUG
* Debug python in terminal
        See www.reddit.com/r/vim/comments/jg91dt/using_termdebug_for_pythons_pdb_examples/
* Try vimspector... https://github.com/puremourning/vimspector

IPYTHON
* Add vim-ipython-cell (run cells inside .py files in Vim)
      and/or jupyter console with script to start kernel and connect to it (lastest one)
        See locally saved discussion
        and see code.visualstudio.com/docs/python/jupyter-support-py
        and see stackoverflow.com/questions/64730660/how-do-i-find-excute-python-interactive-mode-in-visual-studio-code
        and https://github.com/luk400/vim-jukit
        and https://github.com/jpalardy/vim-slime

      Edit and run Jupyter notebooks from Vim or Neovim
         1. **Molten and Quarto**: Molten is a plugin that enables a notebook-like code running experience¹. It can start Jupyter kernels or attach to already running kernels, run code with those
         2. **Jupyter-Vim**: This is a two-way integration between Vim and Jupyter². It allows you to develop code on a Jupyter notebook without leaving the terminal². You can send lines from Vim
         3. **Vim-Notebook**: This plugin allows you to edit `.ipynb` files locally using Vim³.
         4. **Vimpyter**: This is another plugin that allows you to edit your Jupyter notebooks in Vim/Neovim⁴.
         5. **Jupytext.vim**: This Vim plugin allows you to edit Jupyter `.ipynb` files⁵. Make sure that you have the `jupytext` CLI program installed (`pip install jupytext`)⁵.
        Sources
         (1) How to: Edit Jupyter Notebooks in Neovim (with very few ... - Reddit. https://www.reddit.com/r/neovim/comments/17ynpg2/how_to_edit_jupyter_notebooks_in_neovim_with_very/.
         (2) A two-way integration between Vim and Jupyter - Python Awesome. https://pythonawesome.com/a-two-way-integration-between-vim-and-jupyter/.
         (3) Hack of the day: edit and run Python notebook inside vim(neovim). https://medium.com/@teddy23ai/hack-of-the-day-edit-and-run-python-notebook-inside-vim-neovim-19970436b2cd.
         (4) szymonmaszke/vimpyter: Edit your Jupyter notebooks in Vim/Neovim - GitHub. https://github.com/szymonmaszke/vimpyter.
         (5) GitHub - goerz/jupytext.vim: Vim plugin for editing Jupyter ipynb files .... https://github.com/goerz/jupytext.vim.
         (6) undefined. https://github.com/jupyter-vim/jupyter-vim.git.
         (7) undefined. https://github.com/jupyter-vim/vim-notebook.git.

PLUGIN MANAGEMENT
* Use specified commit or version for plugins?
* Fix or confirm proper plugin branches are available and installed in the forked repos
        To ensure that the forked versions of coc.nvim and coc-pyright are installed,
        you can specify the URL of your forked repositories in your .vimrc file.
        Here’s an example of how you can do this:
          Replace 'your-username' with your GitHub username
          Plug 'your-username/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
          Plug 'your-username/coc-pyright', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
          or Plug 'fannheyward/coc-pyright', {'do': 'yarn install --frozen-lockfile'}
        After updating your .vimrc file, you can run :PlugInstall to install the plugins from your forked
        repositories. You don’t need to run :CocInstall coc-pyright since you have already
        specified the forked repositories in your .vimrc file.
* Add plusin required dependencies documentation

MISC
* Support for additional languages
* See my help file content using :view <helpfilename>
* Check licensing so can distribute
* Make some branches private
  24ways.org/2013/keeping-parts-of-your-codebase-private-on-github/
  stackoverflow.com/questions/7983204/having-a-private-branch-of-a-public-repo-on-github
  GitHub Gist... amir-aniyan/create-private-branch-of-a-public-repository.md

GIT SUPPORT
        For git TUI tools, see dev.to/mainendra/terminal-ui-for-git-283p
        and github.com/frontaid/git-cli-tools
        and github.com/rhysd/conflict-marker.vim

IDEAS
* Undo Tree
* Harpoon (or other jump to plugin)
* 