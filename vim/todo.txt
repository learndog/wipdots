Vim Todo

Note: Keymap changes should also include todo, basic guidance, keymap overview updates

READINESS
* 


FUNCTIONALITY
* Test vimdiff for git merge conflicts
* Rationalize the keybindings and weed out non-preferred comamnds

BUGS
* Autopair - land inside autoclose of surround chars - move cursor inside quotes after autoclose (or just use jh/jl?)
* Autopair - in config file, if {<CR> slowly, it fills in with funny stuff
  also for python reconsider the alignment (for {<CR>, tab too large and closing brackets should be on sep line pos 1)

BIG TICKET ITEMS
* Tmux
  - Fix vim maps for splits... L-wj L-wk for horiz splits below/above; L-wh L-wl for vert left/right; L-wv for vert
    but L-wh will be confusing! (Intuitively, it should be a default horiz split)
    Is there any better way to do all four splits plus vert and horiz?
  - Session list, save, load
  - Ctrl-arrows work in vim to switch Tmux windows (Ctrl-B Ctrl-B ARROW as backup if conflict)
  - Ctrl-A as replacement/additional tmux prefix?
  - Status line colors for vim running in tmux (eg chg gray rhs to pink or dark gray or brown?)
  - See https://github.com/gpakosz/.tmux for oh my tmux (requires tmux 2.4)                                          
  -   or a basic simple config at https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/                 
* Git - Lazygit...from lazyvim video on mac,
        But maybe don't need to integrate with vim? What's the benefit?
        Put in ~/Library/Application_Support/lazygit/config.yml...
        ```
        keybinding:
          universal:
            return: '<c-\>'

        gui:
          theme:
              selectedLineBgColor:
                - underline
              selectedRangeBgColor:
                - underline

        git:
          paging:
            colorArg: never
            pager: delta --dark --paging=never
        ```	
* Git - Investigate other TUI tools
        See dev.to/mainendra/terminal-ui-for-git-283p
        and github.com/frontaid/git-cli-tools
        and github.com/rhysd/conflict-marker.vim
* Diffs - Use delta to improve diff viewing
    See https://github.com/dandavison/delta
    See https://dev.to/cloudx/delta-a-new-git-diff-tool-to-rock-your-productivity-2773
    Also take a look at colordiff and difftastic
* Fix references in rhs coclist (design and use a fn to give functionality and look of gi and go)
        Specifically, nice list on rhs
        Interactive click to show location in buffer like preview
        Double click to goto that buffer location and close the split
        Maybe also fzf within the window and open/close items in tree?
        But fundamentally there seem to be fzf lists and coclists, probably hard to combine.
* Support for additional languages
* Ongoing cleanup
  - Reorg to allow alternatives to coc and fzf
  - Reorg to put everything where it logically should belong
  - What dependencies are there for the .vimrc helpers?
  - Clean up the extraneous stuff - alternative code approaches, commented info
         Isolate anything that isn't clean, delete everything that's not needed here.
  - Evaluate in other contexts - eg other versions of linux or in Windows vim

GROOMED BACKLOG
* Use $wipdots_parentdir env var (=$HOME) in .vimrc_helpers/vim_admin.vim
* Figure out how session relative and absolute paths work. Save session after opening with :edit /... with abs path ?
* Search - :[B|P|D]Lines and :[B|P|D]Files[All]  (b=curr buffer, bb=open buff files, p=project, d=dir and optionally specify dir)
           See https://bluz71.github.io/2018/12/04/fuzzy-finding-in-vim-with-fzf.html
           Add :GLines (maybe using my command line search for text in git commits/diffs)
           Rationalize existing searches
           Add keymaps for LinesAll and LinesDots and FLines and FLinesALL
* Search - Test using ' to trigger literal match in a fzf search pattern!!!!! If works, then never use literal mode!
           Test ! as negation
           Test ^ and $ to specify beginning match or end of line match
* Browser - TUI browsers with and without javascript
* Keymap - Use Shift-G and Leader-Shift-G for version control (git) commands
* Keymap - For git diff in new buffer (not split)
* Keymap - Check coc popups scrolling with Ctrl-f and Ctrl-b
* Keymap - Leader vm?... for :verbose map
* LSP - Clean up the functionality of code outlines with CocList on RHS, with and wout filtering
* LSP - List preview and filter problem list
* Document UI navigation quirks
* Rationalize vimrc and helper content to account for optional dependencies. Currently assumes fzf and coc?

BACKLOG
* Git - Add command to list all gitignored files in project (must combine output of two cmds)
           git ls-files --others --ignored --exclude-standard --directory
           git ls-files --others --ignored --exclude-standard
* Keymap - Sign column (gutter) visibility
    Leader-vgn :set scl=no   " force the signcolumn to disappear
    Leader-vgy :set scl=yes  " force the signcolumn to appear
    Leader-vga :set scl=auto " return the signcolumn to the default behaviour
* Status line - Add filetype to status line
* Better splits and windows - see https://github.com/Aster89/WinZoZ/tree/main
* Keymap - Block alignment of 2nd column, eg docstrings like 'parameter:      mytext'
* Search - Add vim version of grep -rni -- "searchText" to find text across files
* Buffers - 
    * Buffer rename
    * Open a buffer in new split
* Tabs - 
    * Tab rename
    * Open buffers as new tabs (if not already a tab)
      :bufdo tab split  (or a script is better)
    * Close all tabs (without error on last one) but keep buffers
      :tabdo close   (keeps the buffers, but won't close the last tab?)
    * Tab prev/next
* Search - fzf for vim help files
* Snippets - Simple manual snippets (and keep in git - manual updates get pushed, no on-the-fly additions)
* Keymap - For :terminal, :vertical terminal, :vertical <modifier> terminal,
        where <modifier> is... lefta[bove], abo[veleft], bel[owright], rightb[elow]
        See https://www.baeldung.com/linux/vim-terminal-open-position
* Keymap - Regular and verbose(where keybind def) keymap searches using vim-which-key and which-key.
        See https://jay-baker.com/posts/vim-1-which-key/
* Synch scroll for git blame sidebar
* Add plugin required dependencies documentation
* Tests - Runners for code and unit tests - fast and easy from vim
* Navigation in i mode
        Left, Rgt, Up, Dwn and begin and end
        Maybe C-hljk? and C-0/C-$? C-b/C-e? Conflicts?
* Make some branches private while developing
        24ways.org/2013/keeping-parts-of-your-codebase-private-on-github/
        stackoverflow.com/questions/7983204/having-a-private-branch-of-a-public-repo-on-github
        GitHub Gist... amir-aniyan/create-private-branch-of-a-public-repository.md

CURRENTLY TESTING
* Keymap - In GCP vim, backspace key sometimes doesn't work in insert mode (set backspace...)
* Keymap - jl to escape insert mode will move cursor left afterwards

ON HOLD / OUT OF SCOPE
* File Manager - TUI in terminal... https://terminaltrove.com/superfile/, ranger, mc
* Debug - ipdb (if pudb not sufficient)
* Debug within vim - pudb and ipdb command line tool - see usage info
        Also see www.reddit.com/r/vim/comments/jg91dt/using_termdebug_for_pythons_pdb_examples/
        If nec, try vimspector... https://github.com/puremourning/vimspector for vim
        and kickstarter (or is it lazyvim?) for debug ui config 
* IPYTHON 
      Add vim-ipython-cell (run cells inside .py files in Vim)
      and/or jupyter console with script to start kernel and connect to it (lastest one)
        See locally saved discussion
        and see code.visualstudio.com/docs/python/jupyter-support-py
        and see stackoverflow.com/questions/64730660/how-do-i-find-excute-python-interactive-mode-in-visual-studio-code
        and https://github.com/luk400/vim-jukit
        and https://github.com/jpalardy/vim-slime

      Edit and run Jupyter notebooks from Vim or Neovim
         1. **Molten and Quarto**: Molten is a plugin that enables a notebook-like code running experience¹. It can start Jupyter kernels or attach to already running kernels, run code with those
         2. **Jupyter-Vim**: This is a two-way integration between Vim and Jupyter². It allows you to develop code on a Jupyter notebook without leaving the terminal². You can send lines from Vim
         3. **Vim-Notebook**: This plugin allows you to edit `.ipynb` files locally using Vim³.
         4. **Vimpyter**: This is another plugin that allows you to edit your Jupyter notebooks in Vim/Neovim⁴.
         5. **Jupytext.vim**: This Vim plugin allows you to edit Jupyter `.ipynb` files⁵. Make sure that you have the `jupytext` CLI program installed (`pip install jupytext`)⁵.
        Sources
         (1) How to: Edit Jupyter Notebooks in Neovim (with very few ... - Reddit. https://www.reddit.com/r/neovim/comments/17ynpg2/how_to_edit_jupyter_notebooks_in_neovim_with_very/.
         (2) A two-way integration between Vim and Jupyter - Python Awesome. https://pythonawesome.com/a-two-way-integration-between-vim-and-jupyter/.
         (3) Hack of the day: edit and run Python notebook inside vim(neovim). https://medium.com/@teddy23ai/hack-of-the-day-edit-and-run-python-notebook-inside-vim-neovim-19970436b2cd.
         (4) szymonmaszke/vimpyter: Edit your Jupyter notebooks in Vim/Neovim - GitHub. https://github.com/szymonmaszke/vimpyter.
         (5) GitHub - goerz/jupytext.vim: Vim plugin for editing Jupyter ipynb files .... https://github.com/goerz/jupytext.vim.
         (6) undefined. https://github.com/jupyter-vim/jupyter-vim.git.
         (7) undefined. https://github.com/jupyter-vim/vim-notebook.git.


